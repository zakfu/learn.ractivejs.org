{"copy":"<p>Animation can play an important role in communicating changing states of your webapp. In this tutorial we'll learn about using <code>ractive.animate()</code>.</p>\n\n<p>Here, we've got a bar chart showing average temperatures throughout the year. We want there to be a smooth transition when the user changes the city using the dropdown menu.</p>\n\n<p>Find the code that changes the data in the bar chart when the user makes a selection from the dropdown. Change <code>this.set</code> to <code>this.animate</code>...</p>\n\n<p>...and that's it! We now have a smooth transition between cities &ndash; not just the bar height, but the labels and colours as well.</p>\n\n<aside>\n\t<p><span class='logo'>Ractive.js</span> is efficient about how it handles animations. Even though there are a total of 72 properties being animated each time (height, colour and label text for two bars for each of twelve months), there is a single animation loop which uses <code>requestAnimationFrame</code> where possible, and which runs as long as there are one or more sets of animations in progress.</p>\n\n\t<p>If a second animation on a keypath were to start before the first had completed, the first would be cancelled.</p>\n</aside>\n","init":true,"javascript":"getJSON( '/temperature.json' ).then( function ( cities ) {\n  ractive.set( 'cities', cities );\n\n  // when the user makes a selection from the drop-down, update the chart\n  ractive.observe( 'selectedIndex', function ( index ) {\n    // Change `this.set()` to `this.animate()`\n    this.set( 'selectedCity', cities[ index ] );\n  });\n});\n\nvar ractive = new Ractive({\n  el: output,\n  template: template,\n  data: {\n    scale: function ( val ) {\n      // quick and dirty...\n      return 2 * Math.abs( val );\n    },\n    format: function ( val ) {\n      // Pro-tip: we're using `this.get()` inside this function -\n      // as a result, Ractive knows that this computation depends\n      // on the value of `degreeType` as well as `val`\n      if ( this.get( 'degreeType' ) === 'fahrenheit' ) {\n        // convert celsius to fahrenheit\n        val = ( val * 1.8 ) + 32;\n      }\n\n      return val.toFixed( 1 ) + '°';\n    },\n    getColor: function ( val ) {\n      // quick and dirty function to pick a colour - the higher the\n      // temperature, the warmer the colour\n      var r = Math.max( 0, Math.min( 255, Math.floor( 2.56 * ( val + 50 ) ) ) );\n      var g = 100;\n      var b = Math.max( 0, Math.min( 255, Math.floor( 2.56 * ( 50 - val ) ) ) );\n\n      return 'rgb(' + r + ',' + g + ',' + b + ')';\n    },\n    monthNames: [ 'J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D' ]\n  }\n});\n","template":"<div class='temperatures'>\n\n  <!-- header and options -->\n  <div class='header'>\n    <h2>Average high and low temperature</h2>\n\n    <!-- switch between celsius and fahrenheit -->\n    <div class='radio-group'>\n      <label>°C <input type='radio' name='{{degreeType}}' value='celsius' checked></label>\n      <label>°F <input type='radio' name='{{degreeType}}' value='fahrenheit'></label>\n    </div>\n\n    <!-- dropdown menu -->\n    <select value='{{selectedIndex}}'>\n      {{#each cities:i}}\n        <option value='{{i}}'>{{name}}</option>\n      {{/each}}\n    </select>\n  </div>\n\n  <!-- the chart -->\n  <div class='bar-chart'>\n    {{#with selectedCity}}\n\n      <!-- 12 sections, one for each month -->\n      {{#each months:i}}\n        <div class='bar-group' style='width: {{ 100 / months.length }}%;'>\n\n          <!-- average high temperature -->\n          <div class='bar-outer high {{ (high >= 0) ? \"positive\" : \"negative\" }}' style='height: {{ scale(high) }}%;'>\n            <div class='bar-inner' style='background-color: {{ getColor(high) }};'></div>\n            <span>{{ format(high) }}</span>\n          </div>\n\n\n          <!-- average low temperature -->\n          <div class='bar-outer low {{ (low >= 0) ? \"positive\" : \"negative\" }}' style='height: {{ scale(low) }}%;'>\n            <div class='bar-inner' style='background-color: {{ getColor(low) }};'></div>\n            <span>{{ format(low) }}</span>\n          </div>\n\n          <!-- month label (JFMAMJJASOND) -->\n          <span class='month-label'>{{ monthNames[i] }}</span>\n        </div>\n      {{/each}}\n    {{/with}}\n\n    <!-- horizontal line representing freezing -->\n    <div class='axis'></div>\n  </div>\n</div>\n","fixed":{"javascript":"getJSON( '/temperature.json' ).then( function ( cities ) {\n  ractive.set( 'cities', cities );\n\n  // when the user makes a selection from the drop-down, update the chart\n  ractive.observe( 'selectedIndex', function ( index ) {\n    this.animate( 'selectedCity', cities[ index ] );\n  });\n});\n\nvar ractive = new Ractive({\n  el: output,\n  template: template,\n  data: {\n    scale: function ( val ) {\n      // quick and dirty...\n      return 2 * Math.abs( val );\n    },\n    format: function ( val ) {\n      // Pro-tip: we're using `this.get()` inside this function -\n      // as a result, Ractive knows that this computation depends\n      // on the value of `degreeType` as well as `val`\n      if ( this.get( 'degreeType' ) === 'fahrenheit' ) {\n        // convert celsius to fahrenheit\n        val = ( val * 1.8 ) + 32;\n      }\n\n      return val.toFixed( 1 ) + '°';\n    },\n    getColor: function ( val ) {\n      // quick and dirty function to pick a colour - the higher the\n      // temperature, the warmer the colour\n      var r = Math.max( 0, Math.min( 255, Math.floor( 2.56 * ( val + 50 ) ) ) );\n      var g = 100;\n      var b = Math.max( 0, Math.min( 255, Math.floor( 2.56 * ( 50 - val ) ) ) );\n\n      return 'rgb(' + r + ',' + g + ',' + b + ')';\n    },\n    monthNames: [ 'J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D' ]\n  }\n});\n"},"index":0,"numSiblings":3,"tutorialTitle":"Animation","tutorialIndex":10,"styles":"#output-block h2 {\n\tmargin: 0 0 0.5em 0;\n}\n\n#output-block svg {\n\twidth: 100%;\n\theight: 100%;\n}\n\n#output-block .temperatures {\n\tposition: relative;\n\twidth: 100%;\n\theight: 100%;\n\tpadding: 4em 0 0 0;\n\t-webkit-box-sizing: border-box;\n\t-moz-box-sizing: border-box;\n\tbox-sizing: border-box;\n}\n\n\n#output-block .header {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\twidth: 100%;\n\theight: 2em;\n}\n\n#output-block .radio-group {\n\tdisplay: inline-block;\n\tfloat: right;\n\ttext-align: right;\n\tpadding: 0.5em 0 0 0;\n}\n\n#output-block .header h2 {\n\tfloat: left;\n\tmargin: 0;\n}\n\n#output-block .header select {\n\tposition: relative;\n\ttop: 0.1em;\n\tfloat: left;\n\tclear: left;\n\tfont-size: inherit;\n\tfont-family: inherit;\n\tz-index: 7;\n}\n\n#output-block .header label {\n\tposition: relative;\n\tz-index: 7;\n}\n\n#output-block .header p {\n\tfloat: left;\n\tclear: left;\n\tmargin: 0;\n}\n\n#output-block .bar-chart {\n\tposition: relative;\n\tpadding: 0 0 3em 0;\n\twidth: 100%;\n\theight: 100%;\n\t-webkit-box-sizing: border-box;\n\t-moz-box-sizing: border-box;\n\tbox-sizing: border-box;\n}\n\n#output-block .bar-group {\n\tposition: relative;\n\tfloat: left;\n\theight: 100%;\n\ttext-align: center;\n}\n\n#output-block .month-label {\n\tposition: absolute;\n\tbottom: -2em;\n\tleft: 0;\n\twidth: 100%;\n}\n\n#output-block .bar-outer {\n\tposition: absolute;\n\twidth: 100%;\n\tpadding: 0 1px;\n\t-webkit-box-sizing: border-box;\n\t-moz-box-sizing: border-box;\n\tbox-sizing: border-box;\n}\n\n#output-block .bar-outer.positive {\n\tbottom: 20%;\n}\n\n#output-block .bar-outer.positive .bar-inner {\n\tbottom: 0;\n\tborder-top: 1px solid #333;\n\tborder-left: 1px solid #333;\n\tborder-right: 1px solid #333;\n\tborder-radius: 2px 2px 0 0;\n}\n\n#output-block .bar-outer.negative {\n\ttop: 80%;\n}\n\n#output-block .bar-outer.negative .bar-inner {\n\ttop: 0;\n\tborder-bottom: 1px solid #333;\n\tborder-left: 1px solid #333;\n\tborder-right: 1px solid #333;\n\tborder-radius: 0 0 2px 2px;\n}\n\n#output-block .bar-outer.high.negative {\n\tz-index: 6;\n}\n\n#output-block .bar-inner {\n\tposition: relative;\n\twidth: 100%;\n\theight: 100%;\n\t-webkit-box-sizing: border-box;\n\t-moz-box-sizing: border-box;\n\tbox-sizing: border-box;\n}\n\n#output-block .high.positive span {\n\ttop: -0.6em;\n\tfont-weight: bold;\n}\n\n#output-block .low.positive span {\n\ttop: 0.8em;\n\tcolor: white;\n\ttext-shadow: 0 0 3px rgba(0,0,0,1), 0 0 3px rgba(0,0,0,1), 0 0 3px rgba(0,0,0,1);\n}\n\n#output-block .high.negative span {\n\tbottom: 0.8em;\n\tcolor: white;\n\ttext-shadow: 0 0 3px rgba(0,0,0,1), 0 0 3px rgba(0,0,0,1), 0 0 3px rgba(0,0,0,1);\n}\n\n#output-block .low.negative span {\n\tbottom: -0.6em;\n\tfont-weight: bold;\n}\n\n#output-block .bar-chart span {\n\tposition: absolute;\n\twidth: 100%;\n\tleft: 0;\n\tfont-family: 'Helvetica Neue', Arial;\n\tfont-size: 0.7em;\n\tline-height: 0;\n\tz-index: 6;\n}\n\n#output-block .axis {\n\tposition: relative;\n\twidth: 100%;\n\theight: 0;\n\tborder-top: 1px solid #333;\n\tz-index: 5;\n\tleft: 0;\n\ttop: 80%;\n}\n","setup":"(function () {\n\tvar promises = {};\n\n\twindow.getJSON = function ( url ) {\n\t\tif ( !promises[ url ] ) {\n\t\t\tpromises[ url ] = new Ractive.Promise( function ( fulfil ) {\n\t\t\t\tvar xhr = new XMLHttpRequest();\n\n\t\t\t\txhr.onload = function () {\n\t\t\t\t\tfulfil( JSON.parse( xhr.responseText ) );\n\t\t\t\t};\n\n\t\t\t\txhr.open( 'GET', url );\n\t\t\t\txhr.send();\n\t\t\t});\n\t\t}\n\n\t\treturn promises[ url ];\n\t};\n}());\n\nwindow.scale = function ( val ) {\n\t// quick and dirty...\n\treturn 2 * Math.abs( val );\n};\n\nwindow.format = function ( val ) {\n  // Pro-tip: we're using `this.get()` inside this function -\n  // as a result, Ractive knows that this computation depends\n  // on the value of `degreeType` as well as `val`\n  if ( this.get( 'degreeType' ) === 'fahrenheit' ) {\n    // convert celsius to fahrenheit\n    val = ( val * 1.8 ) + 32;\n  }\n\n  return val.toFixed( 1 ) + '°';\n};\n\nwindow.getColor = function ( val ) {\n  // quick and dirty function to pick a colour - the higher the\n  // temperature, the warmer the colour\n  var r = Math.max( 0, Math.min( 255, Math.floor( 2.56 * ( val + 50 ) ) ) );\n  var g = 100;\n  var b = Math.max( 0, Math.min( 255, Math.floor( 2.56 * ( 50 - val ) ) ) );\n\n  return 'rgb(' + r + ',' + g + ',' + b + ')';\n};\n\nwindow.monthNames = [ 'J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D' ];\n","cleanup":"delete window.getJSON;\ndelete window.scale;\ndelete window.format;\ndelete window.getColor;\ndelete window.monthNames;\n"}