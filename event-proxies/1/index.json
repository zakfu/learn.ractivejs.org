{"copy":"<p>DOM events are central to anything interactive on the web. You've probably written <code>element.addEventListener('click', handler)</code> or <code>$('#button').on('click', handler)</code>, or similar code, a thousand times.</p>\n\n<p>With <span class='logo'>Ractive.js</span>, you can subscribe to <em>proxy events</em> instead. You declare a proxy event like this...</p>\n\n<pre class='prettyprint lang-html'>\n&lt;button on-click='activate'&gt;Activate!&lt;/button&gt;\n</pre>\n\n<p>...and subscribe to it like this:</p>\n\n<pre class='prettyprint lang-js'>\nractive.on( 'activate', function ( event ) {\n  // `this` is the ractive\n  // `event` contains information about the proxy event\n  alert( 'Activating!' );\n});\n</pre>\n\n<p>This is generally more convenient &ndash; you don't need to pepper the DOM with <code>id</code> and <code>class</code> attributes just so you've got a hook to identify elements with, and proxy event names carry meaning about the user's intended action in a way that <code>mouseover</code> and friends don't, making your templates and your code <em>easier to reason about</em>.</p>\n\n<p>Update the template and JavaScript, then execute.</p>\n\n<aside>\n\t<p>If you use your developer tools to inspect the button, you'll notice that it doesn't have a <code>on-click</code> attribute. When <span class='logo'>Ractive.js</span> parses the template, it knows to treat attributes beginning <code>on-</code> differently. You'll learn more about parsing in a later tutorial.</p>\n</aside>\n","init":true,"javascript":"var ractive = new Ractive({\n  el: output,\n  template: template\n});\n\n// Add the proxy event handler here","template":"<button>Activate!</button>","fixed":{"javascript":"var ractive = new Ractive({\n  el: output,\n  template: template\n});\n\nractive.on( 'activate', function ( event ) {\n  alert( 'Activating!' );\n});","template":"<button on-click='activate'>Activate!</button>"},"index":0,"numSiblings":4,"tutorialTitle":"Event proxies","tutorialIndex":3}