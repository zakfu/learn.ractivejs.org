{"copy":"<p>You can also use mathematical expressions. Let's rummage around in the bag of contrived examples and see what comes out... yep... this one will do... it's a shopping basket.</p>\n\n<p>We have an <code>item</code> property, a <code>price</code>, and a <code>quantity</code>. Add an expression where the total should go:</p>\n\n<pre class='prettyprint lang-html'>\n&lt;td&gt;{{ price * quantity }}&lt;/td&gt;\n</pre>\n\n<p>Execute the code. The total should appear. Now we just need to add a currency formatter &ndash; here's one for the UK (if you're not from here, write one for your own currency for extra credit):</p>\n\n<pre class='prettyprint lang-js'>\nfunction ( num ) {\n  if ( num < 1 ) return ( 100 * num ) + 'p';\n  return '£' + num.toFixed( 2 );\n}\n</pre>\n\n<p>Add that, and use in the template it for both the price and the total. Try changing the price and the quantity.</p>\n\n<textarea class='interactive'>\nractive.set({\n  item: 'banana',\n  price: 0.19,\n  quantity: 7\n});\n</textarea>\n\n<aside>\n\t<p>You might reasonably ask how this works. What happens is this: when the template is parsed, any <em>references</em> inside expressions (such as <code>price</code>, <code>quantity</code> or <code>format</code> in the example above) are identified. At render time, the expression binds to those references and creates a function to calculate the result. (Whenever possible, <span class='logo'>Ractive.js</span> will re-use functions &ndash; for example <code>{{a+b}}</code> and <code>{{c+d}}</code> would share the same function.)</p>\n\n\t<p>When the value of one or more of those references change, the expression is re-evaluated. If the result changes, the DOM is updated.</p>\n\n\t<p>For the super-curious, there's more information on the <a href='http://docs.ractivejs.org/latest/expressions'>docs</a>.</p>\n</aside>\n","init":true,"javascript":"var ractive = new Ractive({\n  el: output,\n  template: template,\n  data: {\n    item: 'pint of milk',\n    price: 0.49,\n    quantity: 5\n  }\n});","styles":"#output-block th {\n\tborder-bottom: 1px solid #eee;\n\tpadding: 0 1em 0 0;\n}\n","template":"<table>\n\t<tr>\n\t\t<th>Price per {{item}}</th>\n\t\t<th>Quantity</th>\n\t\t<th>Total</th>\n\t</tr>\n\n\t<tr>\n\t\t<td>{{price}}</td>\n\t\t<td>{{quantity}}</td>\n\t\t<td></td> <!-- add the total here -->\n\t</tr>\n</table>","fixed":{"javascript":"var ractive = new Ractive({\n  el: output,\n  template: template,\n  data: {\n    item: 'pint of milk',\n    price: 0.49,\n    quantity: 5,\n    format: function ( num ) {\n      if ( num < 1 ) return ( 100 * num ) + 'p';\n      return '£' + num.toFixed( 2 );\n    }\n  }\n});","template":"<table>\n\t<tr>\n\t\t<th>Price per {{item}}</th>\n\t\t<th>Quantity</th>\n\t\t<th>Total</th>\n\t</tr>\n\n\t<tr>\n\t\t<td>{{ format(price) }}</td>\n\t\t<td>{{quantity}}</td>\n\t\t<td>{{ format( price * quantity ) }}</td>\n\t</tr>\n</table>"},"index":1,"numSiblings":3,"tutorialTitle":"Expressions","tutorialIndex":2}