{"cleanup":"delete window.images;\n","console":"slideshow.goto( 3 );","copy":"<p>Time to create our <code>Slideshow</code> class:</p>\n\n<pre class='prettyprint lang-js'>\nvar Slideshow = Ractive.extend({\n  // this will be applied to all Slideshow instances\n  template: template,\n\n  // method for changing the currently displayed image\n  goto: function ( imageNum ) {\n    // goto method goes here...\n  },\n\n  // initialisation code\n  init: function ( options ) {\n    // initialisation code goes here...\n  }\n});\n</pre>\n\n<p>Each <code>Slideshow</code> instance will have a <code>goto</code> method in addition to the normal <code>Ractive</code> instance methods. Any set-up work we need to do can happen in the <code>init</code> method, which gets called as soon as the template has been rendered.</p>\n\n<p>Let's write our <code>goto</code> method:</p>\n\n<pre class='prettyprint lang-js'>\nfunction ( imageNum ) {\n  var images = this.get( 'images' );\n\n  // Make sure the image number is between 0...\n  while ( imageNum < 0 ) {\n    imageNum += images.length;\n  }\n\n  // ...and the maximum\n  imageNum %= images.length;\n\n  // Then, update the view\n  this.set({\n    image: images[ imageNum ],\n    current: imageNum\n  });\n}\n</pre>\n\n<p>Next, we need to listen for the <code>goto</code> event, so that we can call <code>this.goto()</code>. We wire it up inside our <code>init</code> method:</p>\n\n<pre class='prettyprint lang-js'>\nfunction ( options ) {\n  this.on( 'goto', function ( event, index ) {\n    this.goto( index );\n  });\n\n  // start with the first image\n  this.goto( 0 );\n}\n</pre>\n\n<p>Let's add some code to instantiate the slideshow with our gifs. There's a ready-made <code>images</code> variable you can use for this step:</p>\n\n<pre class='prettyprint lang-js'>\nvar slideshow = new Slideshow({\n  el: output,\n  data: { images: images }\n});\n</pre>\n\n<p>Go ahead and execute the code &ndash; you should now have a working slideshow.</p>\n\n<aside>\n  <p>Needless to say, you could add as many bells and whistles as you wanted &ndash; fading or sliding transitions, image preloading, thumbnails, touchscreen gesture controls, and so on.</p>\n\n  <p>You could, of course, just use an existing image slideshow library. But then you would have to learn that library, and potentially submit to its design philosophy.</p>\n\n  <p><span class='logo'>Ractive.js</span> is all about flexibility. If you want to change the design or behaviour of a component (say, adding a class name to a particular element), the power to do so is in your hands &ndash; the template is easy to understand and tweak because it's basically just HTML, and the view logic is straightforward.</p>\n\n  <p>It's better to be able to build your own solution than to rely on developers maintaining high quality and up-to-date documentation.</p>\n</aside>\n","javascript":"var Slideshow = Ractive.extend({\n  // subclass methods and properties go here\n});\n\nvar slideshow = new Slideshow({\n  // instance options go here\n});","setup":"window.images = [\n\t{ src: '/gifs/problem.gif', caption: 'Trying to work out a problem after the 5th hour' },\n\t{ src: '/gifs/css.gif',     caption: 'Trying to fix someone else\\'s CSS' },\n\t{ src: '/gifs/ie.gif',      caption: 'Testing interface on Internet Explorer' },\n\t{ src: '/gifs/w3c.gif',     caption: 'Trying to code to W3C standards' },\n\t{ src: '/gifs/build.gif',   caption: 'Visiting the guy that wrote the build scripts' },\n\t{ src: '/gifs/test.gif',    caption: 'I don\\'t need to test that. What can possibly go wrong?' }\n];\n","template":"<div class='slideshow'>\n  <div class='main'>\n    <a class='prev' on-tap='goto:{{current-1}}'><span>&laquo;</span></a>\n    <div class='main-image'\n         style='background-image: url({{image.src}});'>\n    </div>\n    <a class='next' on-tap='goto:{{current+1}}'><span>&raquo;</span></a>\n  </div>\n\n  <div class='caption'>\n    <p>{{image.caption}}</p>\n  </div>\n</div>\n","fixed":{"javascript":"var Slideshow = Ractive.extend({\n  template: template,\n\n  // method for changing the currently displayed image\n  goto: function ( imageNum ) {\n    var images = this.get( 'images' );\n\n    // Make sure the image number is between 0...\n    while ( imageNum < 0 ) {\n      imageNum += images.length;\n    }\n\n    // ...and the maximum\n    imageNum %= images.length;\n\n    // Then, update the view\n    this.set({\n      image: images[ imageNum ],\n      current: imageNum\n    });\n  },\n\n  // initialisation code\n  init: function ( options ) {\n    this.on( 'goto', function ( event, index ) {\n      this.goto( index );\n    });\n\n    // start with the first image\n    this.goto( 0 );\n  }\n});\n\nvar slideshow = new Slideshow({\n  el: output,\n  data: { images: images }\n});\n"},"index":1,"numSiblings":2,"tutorialTitle":"Extending Ractive","tutorialIndex":7,"styles":"#output-block .slideshow {\n\tposition: relative;\n\twidth: 100%;\n\theight: 100%;\n\t-webkit-box-sizing: border-box;\n\t-moz-box-sizing: border-box;\n\tbox-sizing: border-box;\n\tpadding: 0 0 3em 0;\n\tbackground-color: #f4f4f4;\n}\n\n#output-block .main {\n\tposition: relative;\n\twidth: 100%;\n\theight: 100%;\n\tpadding: 0 2em;\n\t-webkit-box-sizing: border-box;\n\t-moz-box-sizing: border-box;\n\tbox-sizing: border-box;\n}\n\n#output-block .prev, #output-block .next {\n\tposition: absolute;\n\ttop: 0;\n\twidth: 2em;\n\theight: 100%;\n\ttext-align: center;\n\tcursor: pointer;\n\tfont-size: 1em;\n\tpadding: 0;\n\n\t-webkit-box-sizing: border-box;\n\t-moz-box-sizing: border-box;\n\tbox-sizing: border-box;\n\n\t-webkit-user-select: none;\n\t-moz-user-select: none;\n\t-ms-user-select: none;\n\tuser-select: none;\n}\n\n#output-block .prev:hover, #output-block .next:hover {\n\tbackground-color: #eee;\n}\n\n#output-block .prev span, #output-block .next span {\n\tposition: absolute;\n\ttop: 50%;\n\twidth: 100%;\n\tdisplay: block;\n\tline-height: 0;\n\ttext-align: center;\n\tfont-size: 1.6em;\n\tfont-family: Arial;\n\tcolor: #aaa;\n}\n\n#output-block .prev {\n\tleft: 0;\n\tborder-right: 1px solid #ddd;\n}\n\n#output-block .next {\n\tright: 0;\n\tborder-left: 1px solid #ddd;\n}\n\n#output-block .main-image {\n\twidth: 100%;\n\theight: 100%;\n\tbackground: #f4f4f4 no-repeat 50% 50%;\n\tbackground-size: contain;\n}\n\n#output-block .caption {\n\tposition: absolute;\n\twidth: 100%;\n\theight: 3em;\n\tleft: 0;\n\tbottom: 0;\n\ttext-align: center;\n\tbackground-color: white;\n}\n"}