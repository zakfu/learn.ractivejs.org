{"copy":"<p>Here's where Ractive differs from other templating libraries. Normally, if you wanted to change the data, you would have to re-render the entire view, which would have the effect of discarding the DOM nodes you'd already created. That's wasteful.</p>\n\n<p>Instead, we can manipulate views we've already created. Try running this code - click on it and hit <kbd>Shift-Space</kbd>:</p>\n\n<textarea class='interactive'>\nractive.set('greeting', 'Bonjour');\n</textarea>\n\n<p>And now this:</p>\n\n<textarea class='interactive'>\nractive.set('name', 'tout le monde');\n</textarea>\n\n<p>Ooh la la! Even better, we could set both properties in one go. Let's do it in Mandarin this time:</p>\n\n<textarea class='interactive'>\nractive.set({\n  greeting: '你好',\n  name: '世界'\n});\n</textarea>\n\n<aside>\n\t<p>What's happening here is that the contents of the <code>&lt;p&gt;</code> element are split into four text nodes &ndash; one for <code>{{greeting}}</code>, one for the space character, one for <code>{{name}}</code>, and one for the <code>!</code>. Ractive stores references to the nodes that correspond to the variables, and updates them when the data changes, leaving everything else untouched.</p>\n\n\t<p>Surgically updating text nodes is much faster than replacing elements, particularly when you only need to change part of your ractive.</p>\n</aside>\n","javascript":"var ractive = new Ractive({\n  el: output,\n  template: template,\n  data: { greeting: 'Hello', name: 'world' }\n});\n","init":true,"template":"<p>{{greeting}} {{name}}!</p>\n","index":2,"numSiblings":5,"tutorialTitle":"Hello world!","tutorialIndex":0,"styles":"#output-block p {\n\tfont-size: 2em;\n\tline-height: 1;\n\tmargin: 0 0 0.2em 0;\n}\n"}