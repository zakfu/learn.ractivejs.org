{"copy":"<p>Fine, except that multiline string was fugly. It's good to know that you can pass partials in as strings, but unless you're loading those strings from a template file with AJAX, you'd probably prefer a neater way.</p>\n\n<p>There are two. Firstly, you can add partials as <code>&lt;script&gt;</code> tags on the page:</p>\n\n<pre class='prettyprint lang-html'>\n&lt;script id='item' type='text/ractive'&gt;\n&lt;li class='{{ done ? \"done\" : \"pending\" }}'&gt;\n  &lt;input type='checkbox' checked='{{done}}'&gt;\n  &lt;span on-tap='edit'&gt;\n    {{description}}\n\n    {{#if editing}}\n      &lt;input class='edit'\n             value='{{description}}'\n             on-blur='stop_editing'&gt;\n    {{/if}}\n  &lt;/span&gt;\n  &lt;a class='button' on-tap='remove'&gt;x&lt;/a&gt;\n&lt;/li&gt;\n&lt;/script&gt;\n</pre>\n\n<aside>\n\t<p>Note that the <code>id</code> attribute is the name of the partial, and that the <code>type</code> attribute is <code>text/ractive</code> (though it could be anything, as long as it's not <code>text/javascript</code>). This is a convenient way to quickly test ideas out on a blank page (you can use these script tags as main templates as well as partials - just reference them as e.g. <code>'#myTemplate'</code> in your initialisation options).</p>\n</aside>\n\n<p>Or, you can use an <em>inline partial</em>. Inline partials are declared within your main template, surrounded by comment blocks:</p>\n\n<pre class='prettyprint lang-html'>\n&lt;!-- {{>item}} --&gt;\n&lt;li class='{{ done ? \"done\" : \"pending\" }}'&gt;\n  &lt;input type='checkbox' checked='{{done}}'&gt;\n  &lt;span on-tap='edit'&gt;\n    {{description}}\n\n    {{#if editing}}\n      &lt;input class='edit' value='{{description}}' on-blur='stop_editing'&gt;\n    {{/if}}\n  &lt;/span&gt;\n  &lt;a class='button' on-tap='remove'&gt;x&lt;/a&gt;\n&lt;/li&gt;\n&lt;!-- {{/item}} --&gt;\n</pre>\n\n<p>Add the partial to the template, and remove it (and the <code>var item = ...</code> bit) from the javascript code.</p>\n","init":true,"javascript":"var item = \"<li class='{{ done ? \\\"done\\\" : \\\"pending\\\" }}'>\" +\n             \"<input type='checkbox' checked='{{done}}'>\" +\n             \"<span on-tap='edit'>\" +\n               \"{{description}}\" +\n\n               \"{{#if editing}}\" +\n                 \"<input class='edit' \" +\n                        \"value='{{description}}' \" +\n                        \"on-blur='stop_editing'>\" +\n               \"{{/if}}\" +\n             \"</span>\" +\n             \"<a class='button' on-tap='remove'>x</a>\" +\n           \"</li>\";\n\nvar TodoList = Ractive.extend({\n  template: template,\n\n  partials: { item: item },\n\n  addItem: function ( description ) {\n    this.push( 'items', {\n      description: description,\n      done: false\n    });\n  },\n\n  removeItem: function ( index ) {\n    this.splice( 'items', index, 1 );\n  },\n\n  editItem: function ( index ) {\n    var self = this, keydownHandler, blurHandler, input, currentDescription;\n\n    currentDescription = this.get( 'items.' + index + '.description' );\n    this.set( 'items.' + index + '.editing', true );\n\n    input = this.find( '.edit' );\n    input.select();\n\n    window.addEventListener( 'keydown', keydownHandler = function ( event ) {\n      switch ( event.which ) {\n        case 13: // ENTER\n        input.blur();\n        break;\n\n        case 27: // ESCAPE\n        input.value = currentDescription;\n        self.set( 'items.' + index + '.description', currentDescription );\n        input.blur();\n        break;\n\n        case 9: // TAB\n        event.preventDefault();\n        input.blur();\n        self.editItem( ( index + 1 ) % self.get( 'items' ).length );\n        break;\n      }\n    });\n\n    input.addEventListener( 'blur', blurHandler = function () {\n      window.removeEventListener( 'keydown', keydownHandler );\n      input.removeEventListener( 'blur', blurHandler );\n    });\n\n    this.set( 'items.' + index + '.editing', true );\n  },\n\n  init: function ( options ) {\n    var self = this;\n\n    // proxy event handlers\n    this.on({\n      remove: function ( event ) {\n        this.removeItem( event.index.i );\n      },\n      newTodo: function ( event ) {\n        this.addItem( event.node.value );\n        event.node.value = '';\n        setTimeout( function () {\n          event.node.focus();\n        }, 0 );\n      },\n      edit: function ( event ) {\n        this.editItem( event.index.i );\n      },\n      stop_editing: function ( event ) {\n        this.set( event.keypath + '.editing', false );\n      },\n      blur: function ( event ) {\n        event.node.blur();\n      }\n    });\n  },\n\n  // sadly this is necessary for IE - other browsers fire the change event\n  // when you hit enter\n  events: {\n    enter: function ( node, fire ) {\n      var keydownHandler = function ( event ) {\n        var which = event.which || event.keyCode;\n        which === 13 && fire({ node: node, original: event });\n      };\n\n      node.addEventListener( 'keydown', keydownHandler );\n\n      return {\n        teardown: function () {\n          node.removeEventListener( 'keydown', keydownHandler );\n        }\n      };\n    }\n  }\n});\n\nvar ractive = new TodoList({\n  el: output,\n  data: {\n    items: [\n      { done: true,  description: 'Add a todo item' },\n      { done: false, description: 'Add some more todo items' },\n      { done: false, description: 'Complete all the Ractive tutorials' }\n    ]\n  }\n});\n","template":"<h2>To-do list</h2>\n\n<input on-change='newTodo' on-enter='blur' class='newTodo' placeholder='What needs to be done?'>\n\n<ul class='todos'>\n  {{#each items:i}}\n    {{>item}}\n  {{/each}}\n</ul>\n\n<!-- add the inline partial here -->\n","fixed":{"javascript":"var TodoList = Ractive.extend({\n  template: template,\n\n  addItem: function ( description ) {\n    this.push( 'items', {\n      description: description,\n      done: false\n    });\n  },\n\n  removeItem: function ( index ) {\n    this.splice( 'items', index, 1 );\n  },\n\n  editItem: function ( index ) {\n    var self = this, keydownHandler, blurHandler, input, currentDescription;\n\n    currentDescription = this.get( 'items.' + index + '.description' );\n    this.set( 'items.' + index + '.editing', true );\n\n    input = this.find( '.edit' );\n    input.select();\n\n    window.addEventListener( 'keydown', keydownHandler = function ( event ) {\n      switch ( event.which ) {\n        case 13: // ENTER\n        input.blur();\n        break;\n\n        case 27: // ESCAPE\n        input.value = currentDescription;\n        self.set( 'items.' + index + '.description', currentDescription );\n        input.blur();\n        break;\n\n        case 9: // TAB\n        event.preventDefault();\n        input.blur();\n        self.editItem( ( index + 1 ) % self.get( 'items' ).length );\n        break;\n      }\n    });\n\n    input.addEventListener( 'blur', blurHandler = function () {\n      window.removeEventListener( 'keydown', keydownHandler );\n      input.removeEventListener( 'blur', blurHandler );\n    });\n\n    this.set( 'items.' + index + '.editing', true );\n  },\n\n  init: function ( options ) {\n    var self = this;\n\n    // proxy event handlers\n    this.on({\n      remove: function ( event ) {\n        this.removeItem( event.index.i );\n      },\n      newTodo: function ( event ) {\n        this.addItem( event.node.value );\n        event.node.value = '';\n        setTimeout( function () {\n          event.node.focus();\n        }, 0 );\n      },\n      edit: function ( event ) {\n        this.editItem( event.index.i );\n      },\n      stop_editing: function ( event ) {\n        this.set( event.keypath + '.editing', false );\n      },\n      blur: function ( event ) {\n        event.node.blur();\n      }\n    });\n  },\n\n  // sadly this is necessary for IE - other browsers fire the change event\n  // when you hit enter\n  events: {\n    enter: function ( node, fire ) {\n      var keydownHandler = function ( event ) {\n        var which = event.which || event.keyCode;\n        which === 13 && fire({ node: node, original: event });\n      };\n\n      node.addEventListener( 'keydown', keydownHandler );\n\n      return {\n        teardown: function () {\n          node.removeEventListener( 'keydown', keydownHandler );\n        }\n      };\n    }\n  }\n});\n\nvar ractive = new TodoList({\n  el: output,\n  data: {\n    items: [\n      { done: true,  description: 'Add a todo item' },\n      { done: false, description: 'Add some more todo items' },\n      { done: false, description: 'Complete all the Ractive tutorials' }\n    ]\n  }\n});\n","template":"<h2>To-do list</h2>\n\n<input on-change='newTodo' on-enter='blur' class='newTodo' placeholder='What needs to be done?'>\n\n<ul class='todos'>\n  {{#each items:i}}\n    {{>item}}\n  {{/each}}\n</ul>\n\n<!-- {{>item}} -->\n<li class='{{ done ? \"done\" : \"pending\" }}'>\n  <input type='checkbox' checked='{{done}}'>\n  <span on-tap='edit'>\n    {{description}}\n\n    {{#if editing}}\n      <input class='edit' value='{{description}}' on-blur='stop_editing'>\n    {{/if}}\n  </span>\n  <a class='button' on-tap='remove'>x</a>\n</li>\n<!-- {{/item}} -->\n"},"index":1,"numSiblings":2,"tutorialTitle":"Partials","tutorialIndex":9,"styles":"#output-block input {\n\twidth: 100%;\n\tmax-width: 20em;\n\tfont-size: inherit;\n\tfont-family: inherit;\n\tpadding: 0.4em;\n\toutline: none;\n\tborder: 1px solid #ccc;\n\t-webkit-box-sizing: border-box;\n\t-moz-box-sizing: border-box;\n\tbox-sizing: border-box;\n}\n\n#output-block input:focus {\n\tbox-shadow: inset 1px 1px rgba(0,0,0,0.08);\n\tbackground-color: #f4f4f4;\n}\n\n#output-block li .edit {\n\tposition: absolute;\n\twidth: 100%;\n\tleft: -0.2em;\n\ttop: -0.2em;\n\tpadding: 0.2em;\n\tborder: none;\n}\n\n#output-block li input[type=\"checkbox\"] {\n\tposition: absolute;\n\tpadding: 0;\n\tmargin: 0;\n\tleft: 0.5em;\n\ttop: 0.7em;\n\tborder: none;\n\twidth: auto;\n}\n\n#output-block .todos {\n\tpadding: 0;\n\tborder-top: 1px solid #f0f0f0;\n\tmax-width: 20em;\n}\n\n#output-block .todos li {\n\tposition: relative;\n\tpadding: 0.5em 3em 0.5em 2em;\n\tlist-style: none;\n\tborder-bottom: 1px solid #eee;\n\tmargin: 0;\n\tmin-height: 1em;\n}\n\n#output-block .todos span {\n\tposition: relative;\n\tdisplay: block;\n\tcursor: pointer;\n}\n\n#output-block li.done .description {\n\topacity: 0.5;\n\ttext-decoration: line-through;\n}\n\n#output-block .todos .button {\n\tposition: absolute;\n\tright: 0.5em;\n\twidth: 1em;\n\ttext-align: center;\n\ttop: 0.7em;\n\tbackground-color: #d00;\n\tborder: none;\n\topacity: 0.3;\n\tline-height: 1;\n\tcolor: white;\n}\n\n#output-block .todos li:hover {\n\tbackground-color: #f9f9f9;\n}\n\n#output-block .todos li:hover .button {\n\topacity: 1;\n}\n"}