{"cleanup":"delete window.getJSON;\ndelete window.format;\n","init":true,"javascript":"getJSON( '/temperature.json' ).then( function ( cities ) {\n  ractive.set( 'cities', cities );\n\n  ractive.observe( 'selectedIndex', function ( index ) {\n    this.animate( 'selectedCity', cities[ index ], {\n      easing: 'easeOut',\n      duration: 300\n    });\n  });\n});\n\nvar ractive = new Ractive({\n  el: output,\n  template: template,\n  data: {\n    format: function ( val ) {\n      if ( this.get( 'degreeType' ) === 'fahrenheit' ) {\n        // convert celsius to fahrenheit\n        val = ( val * 1.8 ) + 32;\n      }\n\n      return val.toFixed( 1 ) + '°';\n    },\n    monthNames: [ 'J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D' ]\n  },\n\n  computed: {\n    // The SVG path is a computed value that updates whenever\n    // its dependencies (declared with `this.get()`) change\n    svgPath: function () {\n      var data = this.get( 'selectedCity.months' ),\n          xScale = this.get( 'xScale' ),\n          yScale = this.get( 'yScale' );\n\n          // Get an array of points representing the edges of\n          // the temperature band...\n          high = getPoints( 'high' ),\n          low = getPoints( 'low' );\n\n      // ...and join them together\n      return high.concat( low.reverse() ).join( ' ' );\n\n      function getPoints ( highOrLow ) {\n        var result = data.map( function ( month, i ) {\n          return xScale( i + 0.5 ) + ',' + yScale( month[ highOrLow ] );\n        });\n\n        // Add the December value in front of January, and the January value after\n        // December, to show the cyclicality\n        result.unshift( xScale( -0.5 ) + ',' + yScale( data[ data.length - 1 ][ highOrLow ] ) );\n        result.push( xScale( data.length + 0.5 ) + ',' + yScale( data[0][ highOrLow ] ) );\n\n        return result;\n      }\n    },\n\n    // When the dimensions of the container change, we need\n    // to recreate the linear scaling functions\n    xScale: function () {\n      return linearScale([ 0, 12 ], [ 0, this.get( 'width' ) ]);\n    },\n    yScale: function () {\n      return linearScale([ -10, 42 ], [ this.get( 'height' ) - 20, 25 ]);\n    }\n  }\n});\n\n// this returns a function that scales a value from a\n// given domain to a given range. Hat-tip to D3\nfunction linearScale ( domain, range ) {\n  var d0 = domain[0], r0 = range[0], multiplier = ( range[1] - r0 ) / ( domain[1] - d0 );\n\n  return function ( num ) {\n    return r0 + ( ( num - d0 ) * multiplier );\n  };\n}\n\n// Because we're using SVG, we need to recalculate\n// scales when the container resizes\nfunction resize () {\n  var wrapper = ractive.find( '.svg-wrapper' );\n\n  ractive.set({\n    width: wrapper.clientWidth,\n    height: wrapper.clientHeight\n  });\n};\n\n// For the purposes of this tutorial, we've got a global\n// onResize function which lets us safely add resize handlers\nonResize( resize );\nsetTimeout( resize );\n","setup":"(function () {\n\tvar promises = {};\n\n\twindow.getJSON = function ( url ) {\n\t\tif ( !promises[ url ] ) {\n\t\t\tpromises[ url ] = new Ractive.Promise( function ( fulfil ) {\n\t\t\t\tvar xhr = new XMLHttpRequest();\n\n\t\t\t\txhr.onload = function () {\n\t\t\t\t\tfulfil( JSON.parse( xhr.responseText ) );\n\t\t\t\t};\n\n\t\t\t\txhr.open( 'GET', url );\n\t\t\t\txhr.send();\n\t\t\t});\n\t\t}\n\n\t\treturn promises[ url ];\n\t};\n}());\n\nwindow.format = function ( val ) {\n\t// Pro-tip: we're using `this.get()` inside this function -\n\t// as a result, Ractive knows that this computation depends\n\t// on the value of `degreeType` as well as `val`\n\tif ( this.get( 'degreeType' ) === 'fahrenheit' ) {\n\t\t// convert celsius to fahrenheit\n\t\tval = ( val * 1.8 ) + 32;\n\t}\n\n\treturn val.toFixed( 1 ) + '°';\n};\n","copy":"<p>In this example, we're using the same data as in the previous tutorial to draw a combination area range and line chart. It's more of a demo than a lesson.</p>\n\n<p>There are some points worth noting here. Firstly, we're mixing HTML and SVG together in the same ractive - the two languages are treated as equals.</p>\n\n<p>Secondly, we haven't had to write a <code>render</code> or <code>update</code> function &ndash; our intentions are expressed <em>declaratively</em>. There's some custom logic to create the shape of the temperature band polygon, for example, but we don't need to specify when that logic should be invoked &ndash; the system simply reacts to new data and internal changes in state. The temperature labels don't need an event handler to tell them when to switch from °C to °F.</p>\n\n<p>Thirdly, because this is based on a template, it's much easier to understand and extend than we've come to expect data visualisations to be. Ordinarily, you'd have to maintain a complex mental model of the <em>flow</em> of your application in order to understand which bits of code affected the result in which ways &ndash; here, the link between code and result is much more obvious.</p>\n","template":"<div class='temperatures'>\n\n  <!-- header and options -->\n  <div class='header'>\n    <h2>Average high and low temperature</h2>\n\n    <!-- switch between celsius and fahrenheit -->\n    <div class='radio-group'>\n      <label>°C <input type='radio' name='{{degreeType}}' value='celsius' checked></label>\n      <label>°F <input type='radio' name='{{degreeType}}' value='fahrenheit'></label>\n    </div>\n\n    <!-- dropdown menu -->\n    <select value='{{selectedIndex}}'>\n      {{#each cities:i}}\n        <option value='{{i}}'>{{name}}</option>\n      {{/each}}\n    </select>\n  </div>\n\n  <!-- the chart -->\n  <div class='bar-chart'>\n    <div class='svg-wrapper'> <!-- needed to determine size of SVG element in Firefox -->\n      <svg>\n\n        <!-- gradient - higher temperatures are redder, lower temperatures are bluer -->\n        <defs>\n          <linearGradient id='gradient' x2='0' y2='100%' gradientUnits='userSpaceOnUse'>\n            <stop offset='0%' stop-color='rgb(255,0,0)' />\n            <stop offset='100%' stop-color='rgb(0,0,255)' />\n          </linearGradient>\n        </defs>\n\n        <!-- horizontal line representing freezing -->\n        <line class='freezing' x1='0' y1='{{ yScale(0) }}' x2='{{width}}' y2='{{ yScale(0) }}'/>\n\n        {{#with selectedCity}}\n\n          <!-- the band -->\n          <polygon fill='url(#gradient)' stroke='url(#gradient)' class='temperature-band' points='{{svgPath}}'/>\n\n          {{#each months:i}}\n            <!-- point markers for average highs -->\n            <g class='marker' transform='translate({{ xScale(i+0.5) }},{{ yScale(high) }})'>\n              <circle r='2'/>\n              <text y='-10'>{{ format(high) }}</text>\n            </g>\n\n            <!-- point markers for average lows -->\n            <g class='marker' transform='translate({{ xScale(i+0.5) }},{{ yScale(low) }})'>\n              <circle r='2'/>\n              <text y='15'>{{ format(low) }}</text>\n            </g>\n          {{/each}}\n        {{/with}}\n      </svg>\n    </div>\n\n    <div class='month-labels'>\n      {{#each monthNames:i}}\n        <span style='width: {{ 100 / monthNames.length }}%;'>{{this}}</span>\n      {{/each}}\n    </div>\n  </div>\n</div>\n","styles":"#output-block h2 {\n\tmargin: 0 0 0.5em 0;\n}\n\nsvg {\n\twidth: 100%;\n\theight: 100%;\n}\n\n.svg-wrapper {\n\twidth: 100%;\n\theight: 100%;\n}\n\n.temperatures {\n\tposition: relative;\n\twidth: 100%;\n\theight: 100%;\n\tpadding: 4em 0 0 0;\n\t-webkit-box-sizing: border-box;\n\t-moz-box-sizing: border-box;\n\tbox-sizing: border-box;\n}\n\n.header {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\twidth: 100%;\n\theight: 2em;\n}\n\n.radio-group {\n\tdisplay: inline-block;\n\tfloat: right;\n\ttext-align: right;\n\tpadding: 0.5em 0 0 0;\n}\n\n.header h2 {\n\tfloat: left;\n\tmargin: 0;\n}\n\n.header select {\n\tposition: relative;\n\ttop: 0.1em;\n\tfloat: left;\n\tclear: left;\n\tfont-size: inherit;\n\tfont-family: inherit;\n\tz-index: 7;\n}\n\n.header label {\n\tposition: relative;\n\tz-index: 7;\n}\n\n.header p {\n\tfloat: left;\n\tclear: left;\n\tmargin: 0;\n}\n\n.bar-chart {\n\tposition: relative;\n\tpadding: 0 0 3em 0;\n\twidth: 100%;\n\theight: 100%;\n\t-webkit-box-sizing: border-box;\n\t-moz-box-sizing: border-box;\n\tbox-sizing: border-box;\n}\n\n.temperature-band {\n\tfill-opacity: 0.3;\n\tstroke-width: 2;\n}\n\n.freezing {\n\tstroke: #ccc;\n\tstroke-width: 1;\n}\n\n.marker circle {\n\tfill: white;\n\tstroke: black;\n\tstroke-width: 1;\n}\n\n.marker\ttext {\n\ttext-anchor: middle;\n\tfont-family: 'Helvetica Neue', 'Arial';\n\tfont-size: 0.6em;\n\tfont-weight: bold;\n\tfill: #333;\n}\n\n.month-labels {\n\tposition: absolute;\n\tleft: 0;\n\tbottom: 0;\n\twidth: 100%;\n}\n\n.month-labels span {\n\ttext-align: center;\n\tfloat: left;\n\tdisplay: block;\n\tfont-family: 'Helvetica Neue', 'Arial';\n\tfont-size: 0.6em;\n}\n","index":1,"numSiblings":3,"tutorialTitle":"SVG","tutorialIndex":11}