{"copy":"<p>Normally, when an element is rendered, it just sort of gets plonked on the page. With Ractive you have more control: you can specify <code>intro</code> transitions:</p>\n\n<pre class='prettypring lang-html'>\n&lt;div intro='fade'&gt;\n  This div will fade into view\n&lt;/div&gt;\n</pre>\n\n<p>Try adding intros to the three buttons in the template, choosing from <code>fade</code>, <code>slide</code> and <code>fly</code>, which have been included on this page.</p>\n\n<aside>\n\t<p>As with custom events, transitions are distributed as plugins, <a href='http://docs.ractivejs.org/latest/plugins'>which you can download here</a> to use in your project. You can create your own transitions &ndash; <a href='http://docs.ractivejs.org/latest/writing-transition-plugins'>see this docs page</a> for more info.</p>\n\n\t<p>Where possible, Ractive uses CSS transitions, but in older browsers it will fall back to timer-based animation.</p>\n</aside>\n","init":true,"template":"{{#if visible === 1 }}\n  <button on-tap='show:2'>Click me!</button>\n{{/if}}\n\n{{#if visible === 2 }}\n  <button on-tap='show:3'>And me!</button>\n{{/if}}\n\n{{#if visible === 3 }}\n  <button on-tap='show:1'>Now click me!</button>\n{{/if}}\n","javascript":"var ractive = new Ractive({\n  el: output,\n  template: template,\n  data: { visible: 1 }\n});\n\nractive.on({\n  show: function ( event, which ) {\n    this.set( 'visible', which );\n  }\n});","fixed":{"template":"{{#if visible === 1 }}\n  <button intro='fade' on-tap='show:2'>Click me!</button>\n{{/if}}\n\n{{#if visible === 2 }}\n  <button intro='slide' on-tap='show:3'>And me!</button>\n{{/if}}\n\n{{#if visible === 3 }}\n  <button intro='fly' on-tap='show:1'>Now click me!</button>\n{{/if}}\n"},"index":0,"numSiblings":3,"tutorialTitle":"Transitions\n","tutorialIndex":12,"styles":"#output-block button {\n\tdisplay: block;\n\tposition: relative;\n\tpadding: 1em;\n\tfont-size: 1.6em;\n\ttext-align: center;\n\tmargin: 0 auto;\n}\n"}