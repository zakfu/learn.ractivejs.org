{"copy":"<p>Similarly, we can specify <code>outro</code> transitions. When an element is no longer needed on the page, it will exit gracefully.</p>\n\n<p>Try adding <code>outro</code> transitions to the three buttons;</p>\n\n<pre class='prettyprint lang-html'>\n&lt;button intro='fade' outro='fly' on-tap='show:2'&gt;\n  Click me!\n&lt;/button&gt;\n</pre>\n\n<p>Execute the code. Aaargh! It looks horrible!</p>\n\n<p>That's because new elements are being rendered before the old ones get removed from the DOM. What we need to do is <em>chain</em> the transitions &ndash; trigger the removal, wait, and then trigger rendering of the new element.</p>\n\n<p>Calling <code>ractive.set()</code> returns a <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise'>Promise</a>, which resolves on completion of any transitions that are caused by the change. So you can do this:</p>\n\n<pre class='prettyprint lang-js'>\nractive.on({\n  show: function ( event, which ) {\n    ractive.set( 'visible', null ).then( function () {\n      ractive.set( 'visible', which );\n    });\n  }\n});\n</pre>\n\n<aside>\n\t<p>Several methods return a promise, not just <code>ractive.set()</code> &ndash; <code>ractive.update()</code>, <code>ractive.teardown()</code>, <code>ractive.render()</code>, and all of the array methods such as <code>ractive.push()</code>.</p>\n\n\t<p>Because not all browsers implement promises, Ractive currently ships its own <a href='http://promisesaplus.com/'>spec-compliant</a> implementation, but will use native promises wherever possible. Whichever implementation it uses is exposed as <code>Ractive.Promise</code>.</p>\n</aside>\n","init":true,"javascript":"var ractive = new Ractive({\n  el: output,\n  template: template,\n  data: { visible: 1 }\n});\n\nractive.on({\n  show: function ( event, which ) {\n    this.set( 'visible', which );\n  }\n});","template":"{{#if visible === 1 }}\n  <button intro='fade' on-tap='show:2'>Click me!</button>\n{{/if}}\n\n{{#if visible === 2 }}\n  <button intro='slide' on-tap='show:3'>And me!</button>\n{{/if}}\n\n{{#if visible === 3 }}\n  <button intro='fly' on-tap='show:1'>Now click me!</button>\n{{/if}}\n","fixed":{"javascript":"var ractive = new Ractive({\n  el: output,\n  template: template,\n  data: { visible: 1 }\n});\n\nractive.on({\n  show: function ( event, which ) {\n    this.set( 'visible', null, function () {\n      this.set( 'visible', which );\n    });\n  }\n});","template":"{{#if visible === 1 }}\n  <button intro='fade' outro='fly' on-tap='show:2'>Click me!</button>\n{{/if}}\n\n{{#if visible === 2 }}\n  <button intro='slide' outro='fade' on-tap='show:3'>And me!</button>\n{{/if}}\n\n{{#if visible === 3 }}\n  <button intro='fly' outro='slide' on-tap='show:1'>Now click me!</button>\n{{/if}}\n"},"index":1,"numSiblings":3,"tutorialTitle":"Transitions\n","tutorialIndex":12,"styles":"#output-block button {\n\tdisplay: block;\n\tposition: relative;\n\tpadding: 1em;\n\tfont-size: 1.6em;\n\ttext-align: center;\n\tmargin: 0 auto;\n}\n"}