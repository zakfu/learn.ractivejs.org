{"copy":"<p>The 'Hello world!' of two-way data binding looks like this:</p>\n\n<pre class='prettyprint lang-html'>\n&lt;label&gt;\n  Enter your name:\n  &lt;input value='{{name}}'&gt;\n&lt;/label&gt;\n\n&lt;p&gt;Hello, {{name}}!&lt;/p&gt;\n</pre>\n\n<p>Update the template and re-render it, then type your name in the box.</p>\n\n<aside>\n\t<p>Internally, we're binding to <code>input</code> events (and <code>keyup</code> for IE, since it doesn't fire <code>input</code> correctly) alongside <code>change</code> and <code>blur</code> events &ndash; this ensures instantaneous feedback for a slick experience.</p>\n\n\t<p>If you'd rather the updates only happened on <code>change</code> and <code>blur</code>, pass in <code>lazy: true</code> as an initialisation option.</p>\n\n\t<p>If you'd rather disable two-way binding altogether, you can do so with <code>twoway: false</code>.</p>\n</aside>\n\n<p>That's a cute demo, but it doesn't have much real world use. In all likelihood we want to do something with the data when it changes. For that, we use <code>ractive.observe()</code>:</p>\n\n<pre class='prettyprint lang-js'>\nractive.observe( 'name', function ( newValue, oldValue ) {\n  doSomethingWith( newValue );\n});\n</pre>\n","template":"<label>\n  Enter your name:\n  <input>\n</label>\n\n<p>Hello, {{name}}!</p>\n","init":true,"javascript":"var ractive = new Ractive({\n  el: output,\n  template: template\n});","fixed":{"template":"<label>\n  Enter your name:\n  <input value='{{name}}'>\n</label>\n\n<p>Hello, {{name}}!</p>\n"},"index":0,"numSiblings":4,"tutorialTitle":"Two-way binding","tutorialIndex":8,"styles":"#output-block label {\n\tdisplay: block;\n}\n\n#output-block fieldset {\n\tborder: none;\n\tborder-top: 1px solid #eee;\n\tmargin: 1em 0 0 0;\n\tpadding: 1em 0 0 0;\n}\n"}