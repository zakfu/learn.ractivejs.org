{"console":"ractive.set( 'checked', true );\nractive.set( 'color', 'green' );","copy":"<p>You can control whether checkboxes are checked or not like so:</p>\n\n<pre class='prettyprint lang-html'>\n&lt;label&gt;\n  &lt;input type='checkbox' checked='{{checked}}'&gt;\n  {{#if checked}}checked!{{else}}not checked{{/if}}\n&lt;/label&gt;\n</pre>\n\n<p>Update the template and try toggling the checkbox.</p>\n\n<p>If you have a group of radio buttons, whose values are mutually exclusive, you can do this:</p>\n\n<pre class='prettyprint lang-html'>\n&lt;label&gt;&lt;input type='radio' name='{{color}}' value='red' checked&gt; red&lt;/label&gt;\n&lt;label&gt;&lt;input type='radio' name='{{color}}' value='green'&gt; green&lt;/label&gt;\n&lt;label&gt;&lt;input type='radio' name='{{color}}' value='blue'&gt; blue&lt;/label&gt;\n&lt;p&gt;The selected colour is &lt;span style='color: {{color}};'&gt;{{color}}&lt;/span&gt;.&lt;/p&gt;\n</pre>\n\n<p>Here, because we've set the <code>name</code> attribute to <code>{{color}}</code>, the value of <code>color</code> is set to the <code>value</code> attribute of whichever radio button is currently checked. (If you need to read that sentence a couple of times, I don't blame you.) Notice that the value is initialised to <code>red</code>, because that option is initially checked.</p>\n\n<p>Add <code>name='{{color}}'</code> to each of the options in the template and run the code.</p>\n\n<aside>\n\t<p>Front-end Ã¼ber nerds will notice that this isn't how these attributes normally work. For example, a checkbox with <code>checked='false'</code> is the same as one with <code>checked='true'</code>, because it's a <em>boolean attribute</em> which either exists on the element or doesn't &ndash; its <em>value</em> is completely irrelevant.</p>\n\n\t<p>Furthermore, once you've interacted with a checkbox, its <code>checked</code> attribute becomes irrelevant! You can only change the value programmatically by doing <code>element.checked = true</code> rather than <code>element.setAttribute( 'checked' )</code>.</p>\n\n\t<p>Combine all that with cross-browser quirks (e.g. IE8 and below only fire <code>change</code> events on blur), and we're in some seriously confusing territory.</p>\n\n\t<p>So <span class='logo'>Ractive.js</span> makes no apology for using <code>checked='{{checked}}'</code> to mean 'checked if <code>checked</code> is <code>true</code>, unchecked if it's <code>false</code>'. We're bringing sanity to the process of gathering user input.</p>\n</aside>\n\n<p>Needless to say, you can continue to interact with the values programmatically:</p>\n\n<textarea class='interactive'>\nractive.set( 'checked', true );\nractive.set( 'color', 'green' );\n</textarea>\n\n<p>This is as good a time as any to introduce the <code>ractive.toggle()</code> method:</p>\n\n<textarea class='interactive'>\nractive.toggle( 'checked' );\n\n// Equivalent to:\n//   var checked = ractive.get( 'checked' );\n//   ractive.set( 'checked', !checked );\n</textarea>\n","javascript":"var ractive = new Ractive({\n  el: output,\n  template: template\n});","init":true,"template":"<label>\n  <input type='checkbox'>\n  {{#if checked}}checked!{{else}}not checked{{/if}}\n</label>\n\n<fieldset>\n  <label><input type='radio' value='red' checked> red</label>\n  <label><input type='radio' value='green'> green</label>\n  <label><input type='radio' value='blue'> blue</label>\n  <p>The selected colour is <span style='color: {{color}};'>{{color}}</span>.</p>\n</fieldset>\n","fixed":{"template":"<label>\n  <input type='checkbox' checked='{{checked}}'>\n  {{#if checked}}checked!{{else}}not checked{{/if}}\n</label>\n\n<fieldset>\n  <label><input type='radio' name='{{color}}' value='red' checked> red</label>\n  <label><input type='radio' name='{{color}}' value='green'> green</label>\n  <label><input type='radio' name='{{color}}' value='blue'> blue</label>\n  <p>The selected colour is <span style='color: {{color}};'>{{color}}</span>.</p>\n</fieldset>\n"},"index":1,"numSiblings":4,"tutorialTitle":"Two-way binding","tutorialIndex":8,"styles":"#output-block label {\n\tdisplay: block;\n}\n\n#output-block fieldset {\n\tborder: none;\n\tborder-top: 1px solid #eee;\n\tmargin: 1em 0 0 0;\n\tpadding: 1em 0 0 0;\n}\n"}